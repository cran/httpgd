// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// httpgd.cpp
bool httpgd_(int devnum, std::string host, int port, bool cors, std::string token, bool silent, std::string wwwpath);
extern "C" SEXP _httpgd_httpgd_(SEXP devnum, SEXP host, SEXP port, SEXP cors, SEXP token, SEXP silent, SEXP wwwpath) {
  BEGIN_CPP11
    return cpp11::as_sexp(httpgd_(cpp11::as_cpp<cpp11::decay_t<int>>(devnum), cpp11::as_cpp<cpp11::decay_t<std::string>>(host), cpp11::as_cpp<cpp11::decay_t<int>>(port), cpp11::as_cpp<cpp11::decay_t<bool>>(cors), cpp11::as_cpp<cpp11::decay_t<std::string>>(token), cpp11::as_cpp<cpp11::decay_t<bool>>(silent), cpp11::as_cpp<cpp11::decay_t<std::string>>(wwwpath)));
  END_CPP11
}
// httpgd.cpp
cpp11::list httpgd_details_(int devnum);
extern "C" SEXP _httpgd_httpgd_details_(SEXP devnum) {
  BEGIN_CPP11
    return cpp11::as_sexp(httpgd_details_(cpp11::as_cpp<cpp11::decay_t<int>>(devnum)));
  END_CPP11
}
// httpgd.cpp
std::string httpgd_random_token_(int len);
extern "C" SEXP _httpgd_httpgd_random_token_(SEXP len) {
  BEGIN_CPP11
    return cpp11::as_sexp(httpgd_random_token_(cpp11::as_cpp<cpp11::decay_t<int>>(len)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_httpgd_httpgd_",              (DL_FUNC) &_httpgd_httpgd_,              7},
    {"_httpgd_httpgd_details_",      (DL_FUNC) &_httpgd_httpgd_details_,      1},
    {"_httpgd_httpgd_random_token_", (DL_FUNC) &_httpgd_httpgd_random_token_, 1},
    {NULL, NULL, 0}
};
}

void import_unigd_api(DllInfo* dll);

extern "C" attribute_visible void R_init_httpgd(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  import_unigd_api(dll);
  R_forceSymbols(dll, TRUE);
}
